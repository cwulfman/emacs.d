#+TITLE: Cliff Wulfman's Emacs configuration
#+OPTIONS: toc:4 h:4
* Configuration
** About this file
   :PROPERTIES:
   :CUSTOM_ID: babel-init
   :END:
   <<babel-init>>

   My ~/.emacs.d/init.el is symlinked to cew.el, which is generated
   from this file via M-x org-babel-tangle (C-c C-v t). Re-run
   org-babel-tangle whenever you edit this file.

** Starting up
   Taken from Sacha Chua.

   #+begin_src emacs-lisp :tangle yes
     ;; This sets up the load path so that we can override it
     (package-initialize)
     ;; Override the packages with the git version of Org and other packages
     ;;  (add-to-list 'load-path "~/.emacs.d/elpa/org-20180917")
     ;;  (add-to-list 'load-path "~/.emacs.d/elpa/org-plus-contrib-20180917")
     (add-to-list 'load-path "/usr/local/share/emacs/site-lisp")
     (add-to-list 'load-path "~/.emacs.d/vendor")
     (setq package-enable-at-startup nil)
     (setq custom-file "~/.emacs.d/custom-settings.el")
     (load custom-file t)
   #+end_src

** Personal information
   #+begin_src emacs-lisp :tangle yes
     (setq user-full-name "Clifford Wulfman"
	   user-mail-address "cwulfman@princeton.edu")
   #+end_src
** General Emacs initialization
*** Add package archives
   #+BEGIN_SRC emacs-lisp :tangle yes
     (unless (assoc-default "melpa" package-archives)
       (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
     (unless (assoc-default "org" package-archives)
       (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))
     (unless (assoc-default "elpy" package-archives)
       (add-to-list 'package-archives
		    '("elpy" . "http://jorgenschaefer.github.io/packages/")))
   #+END_SRC

   Use =M-x package-refresh-contents= to reload the list of packages
   after adding these for the first time.

*** Add my elisp directory and other files
    Sometimes I load files outside the package system. As long as
    they're in a directory in my =load-path=, Emacs can find them.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (unless (boundp 'user-emacs-directory)
	(defvar user-emacs-directory "~/.emacs.d/"))
      (defvar user-elisp-directory "~/elisp")
      (add-to-list 'load-path user-elisp-directory)
    #+END_SRC

    Use package is vital.

     #+BEGIN_SRC emacs-lisp :tangle yes
       (add-to-list 'load-path "~/.emacs.d/use-package")
       (require 'use-package)
       (setq use-package-verbose t)
       (use-package auto-compile
	 :ensure t
	 :config (auto-compile-on-load-mode))
       (setq load-prefer-newer t)
     #+END_SRC

*** Keep things minimalistic
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq inhibit-startup-screen t)
      (setq blink-cursor-mode nil)
    #+END_SRC

** General Configuration
*** Window configuration
    #+BEGIN_SRC emacs-lisp :tangle yes
      (when window-system
	(tooltip-mode -1)
	(tool-bar-mode -1)
	(menu-bar-mode 1)
	(scroll-bar-mode -1))
    #+END_SRC
*** Opacity
    http://emacs-fu.blogspot.com/2009/02/transparent-emacs.html
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun djcb-opacity-modify (&optional dec)
	"modify the transparency of the emacs frame; if DEC is t,
	  decrease the transparency, otherwise increase it in 10%-steps"
	(let* ((alpha-or-nil (frame-parameter nil 'alpha)) ; nil before setting
		(oldalpha (if alpha-or-nil alpha-or-nil 100))
		(newalpha (if dec (- oldalpha 10) (+ oldalpha 10))))
	  (when (and (>= newalpha frame-alpha-lower-limit) (<= newalpha 100))
	    (modify-frame-parameters nil (list (cons 'alpha newalpha))))))

       ;; C-8 will increase opacity (== decrease transparency)
       ;; C-9 will decrease opacity (== increase transparency
       ;; C-0 will returns the state to normal
      (global-set-key (kbd "C-8") '(lambda()(interactive)(djcb-opacity-modify)))
      (global-set-key (kbd "C-9") '(lambda()(interactive)(djcb-opacity-modify t)))
      (global-set-key (kbd "C-0") '(lambda()(interactive)
				     (modify-frame-parameters nil `((alpha . 100)))))
    #+END_SRC
*** Mode line
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package smart-mode-line
	:ensure t
	:defer t)
    #+END_SRC
*** Dired
    Use gls for dired mode (see http://emacsredux.com/blog/2015/05/09/emacs-on-os-x/)
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq insert-directory-program (executable-find "gls"))
    #+END_SRC

    Make dired listings human-readable
    #+begin_src emacs-lisp :tangle yes
      (setq dired-listing-switches "-alh")
    #+end_src
*** Don't use tabs for spacing
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq indent-tabs-mode nil)
    #+END_SRC

** Mac-specific configuration
   #+BEGIN_SRC emacs-lisp :tangle yes
     (when (eq system-type 'darwin)
       (setq mac-option-modifier (quote meta))
       (setq ns-alternate-modifier (quote meta))
       (setq mac-command-modifier (quote super))
       ;; set $MANPATH, $PATH, and exec-path
       (use-package exec-path-from-shell
	 :ensure t
	 :config
	 (progn
	   (exec-path-from-shell-initialize))))
    #+END_SRC

** FiraCode
   FiraCode is a monospaced programming font with
   some fancy ligatures, which can be enabled easily
   on macOS https://github.com/tonsky/FiraCode/wiki/Emacs-instructions
   #+begin_src emacs-lisp :tangle yes
     (when (eq system-type 'darwin)
       (mac-auto-operator-composition-mode))
   #+end_src
* Princeton-specific
  Create shortcuts for dired-tramp

  #+begin_src emacs-lisp :tangle yes
    (defun connect-lib-staff373 ()
      (interactive)
      (dired "/ssh:cwulfman@lib-staff373.princeton.edu:/"))
  #+end_src
* Package-specific configurations
** Counsel / Ivy / Swiper
   I go off and on with these packages. Here's how to install and
   configure (see the manual: http://oremacs.com/swiper/ and the developer's own
   init.el: https://github.com/bbatsov/emacs.d/blob/master/init.el
   #+begin_src emacs-lisp :tangle yes
     (use-package ivy
       :ensure t
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t)
       (setq ivy-count-format "(%d/%d) ")
       (global-set-key (kbd "C-c C-r") 'ivy-resume)
       (global-set-key (kbd "<f6>") 'ivy-resume))

     (use-package swiper
       :ensure t
       :config
       (global-set-key (kbd "C-s") 'swiper))

     (use-package counsel
       :ensure t
       :config
       (global-set-key (kbd "M-x") 'counsel-M-x)
       (global-set-key (kbd "C-x C-f") 'counsel-find-file)
       (global-set-key (kbd "<f1> f") 'counsel-describe-function)
       (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
       (global-set-key (kbd "<f1> l") 'counsel-find-library)
       (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
       (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
       (global-set-key (kbd "C-c g") 'counsel-git)
       (global-set-key (kbd "C-c j") 'counsel-git-grep)
       (global-set-key (kbd "C-c a") 'counsel-ag)
       (global-set-key (kbd "C-x l") 'counsel-locate)
       (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
   #+end_src

** magit
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package magit
       :ensure t
       :config
	 ;; make ivy work with magit  http://oremacs.com/2015/04/16/ivy-mode/ -cew 8/4/2016
       (setq magit-completing-read-function 'ivy-completing-read)
       (setq magit-item-highlight-face 'bold))
   #+END_SRC
** try mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package try
    :ensure t)
#+END_SRC
** which key
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package which-key
   :ensure t
   :config
   (which-key-mode))
   #+END_SRC

** nxml mode
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq nxml-auto-insert-xml-declaration-flag t)
     (setq nxml-section-element-name-regexp "template\\|article\\|\\(sub\\)*section\\|chapter\\|div\\|appendix\\|part\\|preface\\|reference\\|simplesect\\|bibliography\\|bibliodiv\\|glossary\\|glossdiv\\|teiHeader\\|text\\Ifront\\|body\\|back\\|list")
     (setq nxml-slash-auto-complete-flag t)
     (eval-after-load "rng-loc"
       '(add-to-list 'rng-schema-locating-files (expand-file-name "schemas.xml" user-emacs-directory)))
   #+END_SRC
** n3 mode
   #+begin_src emacs-lisp :tangle yes
     (add-to-list 'load-path "~/.emacs.d/vendor/n3-mode.el")
     (autoload 'n3-mode "n3-mode" "Major mode for OWL or N3 files" t)

     ;; Turn on font lock when in n3 mode
     (add-hook 'n3-mode-hook
	       'turn-on-font-lock)

     (setq auto-mode-alist
	   (append
	    (list
	     '("\\.n3" . n3-mode)
	     '("\\.ttl" . n3-mode)
	     '("\\.owl" . n3-mode))
	    auto-mode-alist))
   #+end_src

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package n3-mode
       :ensure t
       :commands n3-mode
       :mode "\\.n3\\|\\.ttl\\|\\.owl")
   #+END_SRC

** SPARQL
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package sparql-mode
       :defer t
       :mode (("\\.rq\\'" . sparql-mode)))
   #+END_SRC
** Org Mode
   I use org mode for almost everything. Several folks have developed
   very elaborate configurations for themselves; it's best not simply
   to copy and paste, because the customizations are personal.  I'll be
   adding to this over time.
*** Enable contrib
   #+BEGIN_SRC emacs-lisp :tangle yes
     (add-to-list 'load-path
     (concat (file-name-as-directory user-elisp-directory)
     "org-mode/contrib/lisp"))
    #+END_SRC
*** Keyboard shortcuts

    #+BEGIN_SRC emacs-lisp :tangle yes
      (bind-key "C-c c" 'org-capture)
      (bind-key "C-c a" 'org-agenda)
      (bind-key "C-c l" 'org-store-link)
      ;; (bind-key "C-c b" 'org-iswitchb)
    #+END_SRC

*** Agenda
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq org-agenda-files
	(delq nil
	  (mapcar (lambda (x) (and (file-exists-p x) x))
		  '(
		    "~/gtd/gtd.org"
		    "~/gtd/notes.org"))))

      (setq org-agenda-span 14)
    #+END_SRC
*** Capture Templates
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defvar my/org-basic-task-template "* TODO %^{Task}
	:PROPERTIES:
	:Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}
	:END:
	Captured %<%Y-%m-%d %H:%M>
	%?

	%i
	" "Basic task data")

      (setq org-capture-templates
	    (quote
	     (
	     ("j" "Journal Entry" entry
	       (file+olp+datetree "~/personal/journal.org")
	       "* %U
	%?
	%i
	%a")
	
	      ("t" "Todo" entry
	       (file+olp "~/gtd/gtd.org" "INBOX")
	       "* TODO %?\n  %i\n  %a")
	
	      ("m" "Meeting" entry
	       (file+olp "~/gtd/notes.org" "Meetings")
	       "* %U MEETING with %? :MEETING:
      ,** Notes

      ,** Actions
      " :clock-in t :clock-resume t)
	
	      ("p" "Phone" entry
	       (file+olp "~/gtd/notes.org" "Meetings")
	       "* %U CALL with %? :CALL:
      ,** Notes

      ,** Actions
      " :clock-in t :clock-resume t)
	
	      ("n" "Note" entry
	       (file+headline "~/gtd/notes.org" "Notes")
	       "* %u %?" :prepend t)
	      ))
	    )
    #+END_SRC
*** Faces
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq org-todo-keyword-faces
	    (quote (("TODO" :foreground "DeepSkyBlue2" :weight normal)
		    ("NEXT" :foreground "DeepSkyBlue2" :weight bold)
		    ("IN_PROGRESS" :foreground "green3" :weight normal)
		    ("DONE" :foreground "gray" :weight normal)
		    ("WAITING" :foreground "orange" :weight normal)
		    ("HOLD" :foreground "red" :weight normal)
		    ("CANCELLED" :foreground "light gray" :weight normal)
		    ("MEETING" :foreground "forest green" :weight normal)
		    ("PHONE" :foreground "forest green" :weight noral))))
    #+END_SRC
*** Tasks and States
    Taken and adapted from Bernt Hansen.
    #+begin_src emacs-lisp :tangle yes
      (setq org-todo-keywords
	    (quote ((sequence "TODO(t)" "NEXT(n)" "IN_PROGRESS" "|" "DONE(d)")
		    (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))
    #+end_src
    Bernt Hansen has a few triggers that automatically assign tags to tasks
    based on state changes.  If a task moves to =CANCELLED= state then
    it gets a =CANCELLED= tag.  Moving a =CANCELLED= task back to
    =TODO= removes the =CANCELLED= tag.  These are used for filtering
    tasks in agenda views which I'll talk about later.

    The triggers break down to the following rules:
    - Moving a task to =CANCELLED= adds a =CANCELLED= tag
    - Moving a task to =WAITING= adds a =WAITING= tag
    - Moving a task to =HOLD= adds =WAITING= and =HOLD= tags
    - Moving a task to a done state removes =WAITING= and =HOLD= tags
    - Moving a task to =TODO= removes =WAITING=, =CANCELLED=, and =HOLD= tags
    - Moving a task to =NEXT= removes =WAITING=, =CANCELLED=, and =HOLD= tags
    - Moving a task to =DONE= removes =WAITING=, =CANCELLED=, and =HOLD= tags

     The tags are used to filter tasks in the agenda views conveniently.
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq org-todo-state-tags-triggers
	     (quote (("CANCELLED" ("CANCELLED" . t))
		     ("WAITING" ("WAITING" . t))
		     ("HOLD" ("WAITING") ("HOLD" . t))
		     (done ("WAITING") ("HOLD"))
		     ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
		     ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
		     ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
     #+END_SRC
*** KOMA-Script configuration
    For writing letters in org.  The following configuration comes from [[http://orgmode.org/worg/exporters/koma-letter-export.html][worg]]. 

    #+BEGIN_SRC emacs-lisp :tangle no
      (eval-after-load 'ox '(require 'ox-koma-letter))
      (eval-after-load 'ox-latex
        '(add-to-list 'org-latex-packages-alist '("AUTO" "babel" t) t))
    #+END_SRC
*** org-reveal
    Slide presentations.  See http://cestlaz.github.io/posts/using-emacs-11-reveal/#.V5TkOpMrJE5
    Disabled for normal use; it loads slowly
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package ox-reveal
        :ensure ox-reveal)
      (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
      (setq org-reveal-mathjax t)
      (use-package htmlize
      :ensure t)
    #+END_SRC

    #+RESULTS:
*** markdown-mode
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package markdown-mode
        :ensure t
        :commands (markdown-mode gfm-mode)
        :mode (("README\\.md\\'" . gfm-mode)
               ("\\.md\\'" . markdown-mode)
               ("\\.markdown\\'" . markdown-mode))
        :init (setq markdown-command "multimarkdown"))
    #+END_SRC
*** Aesthetics
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package org-bullets
	:ensure t
	:config
	(add-hook
	 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC

*** org-babel
   #+BEGIN_SRC emacs-lisp :tangle yes
     (org-babel-do-load-languages
      (quote org-babel-load-languages)
      (quote ((emacs-lisp . t)
	      (dot . t)
	      (ditaa . t)
	      (python . t)
	      (ruby . t)
	      (gnuplot . t)
	      (clojure . t)
	      (shell . t)
	      (org . t)
	      (plantuml . t)
	      (sparql . t)
	      (latex . t))))
     ; Use fundamental mode when editing plantuml blocks with C-c '
     ; (add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))
     (add-to-list 'org-src-lang-modes (quote ("plantuml" . plantuml)))
   #+END_SRC 
*** org noter
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package org-noter
	:ensure t)
    #+END_SRC
*** literate programming
    From [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][a tutorial]] I found.
    #+begin_src emacs-lisp :tangle yes
      (setq org-confirm-babel-evaluate nil
	    org-src-fontify-natively t
	    org-src-tab-acts-natively t)
    #+end_src
** Projectile
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package projectile
       :ensure t
       :config
       (setq projectile-completion-system 'ivy)
       (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (projectile-mode +1))
   #+END_SRC
** paredit mode
   #+begin_src emacs-lisp :tangle yes
     (use-package paredit
       :ensure t
       :init
       (add-hook 'clojure-mode-hook #'enable-paredit-mode))
   #+end_src
** ibuffer mode
   #+begin_src emacs-lisp :tangle yes
     (setq ibuffer-saved-filter-groups
	   (quote (("default"
		    ("dired" (mode . dired-mode))
		    ("ruby" (or (mode . Ruby)
				(mode . EnhRuby)))
		    ("org" (or
			    (mode . org-mode)
			    (filename . "OrgMode")))
		    ("magit" (name . "\*magit"))
		    ("emacs" (or
			      (name . "^\\*scratch\\*$")
			      (name . "^\\*Messages\\*$")))))))

     (add-hook 'ibuffer-mode-hook
	       (lambda ()
		 (ibuffer-switch-to-saved-filter-groups "default")))

   #+end_src
   As a crib for learning, add menu for paredit
   #+begin_src emacs-lisp :tangle yes
     (use-package paredit-menu
       :ensure t)
   #+end_src
* General Programming
* Language Support
** Common Lisp
*** slime
    #+begin_src emacs-lisp :tangle no
      (use-package slime
	:ensure t
	:config
	(progn
	  (setq inferior-lisp-program "/usr/local/bin/sbcl")
	  ))
    #+end_src
*** sbcl
   My default implementation is sbcl. Use the following to get
   slime going from QuickLisp.

   #+BEGIN_SRC emacs-lisp :tangle yes
  (load (expand-file-name "~/quicklisp/slime-helper.el"))
  ;; Replace "sbcl" with the path to your implementation
  (setq inferior-lisp-program "/usr/local/bin/sbcl")   
   #+END_SRC

** elisp
*** dash
    #+begin_src emacs-lisp :tangle yes
      (progn
	(use-package dash
	  :ensure t
	  :config
	  (dash-enable-font-lock))
	(use-package dash-functional :ensure t))
    #+end_src
*** s
    A string-manipulation library.
    #+begin_src emacs-lisp :tangle yes
      (use-package s :ensure t)
    #+end_src
*** request
    An easy http library
    #+begin_src emacs-lisp :tangle yes
      (use-package request :ensure t)
    #+end_src
** Cucumber
*** feature mode
    For editing cucumber stories
    #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package feature-mode
	 :ensure t
	 :defer t
	 :config
	 (progn
	   (setq feature-default-language "fi")
	   (add-to-list 'auto-mode-alist'("\.feature$" . feature-mode))))
    #+END_SRC
** Clojure
   Higginbotham's /Clojure for the Brave and True/ includes some emacs init
   code (https://www.nostarch.com/clojure/).  There's much more to add.

   #+begin_src emacs-lisp :tangle yes
   (use-package clojure-mode
     :ensure t)
   #+end_src

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package cider
       :ensure t
       :init
       (add-hook 'cider-mode-hook #'eldoc-mode)
       (add-hook 'cider-repl-mode-hook #'company-mode)
       (add-hook 'cider-mode-hook #'company-mode)
       (add-hook 'cider-repl-mode-hook #'paredit-mode)
       (setq nrepl-log-messages t))
   #+END_SRC

 Using rainbow delimiters is handy.
 #+begin_src emacs-lisp :tangle yes
   (use-package rainbow-delimiters
     :ensure t
     :init
     (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode))
 #+end_src

** Ruby
   In preparation for all-hands week, I'm going to revamp my
   ruby-editing environment, based on the latest I can glean from the
   web. 

   Spacemacs has a [[https://github.com/syl20bnr/spacemacs/tree/develop/layers/+lang/ruby#test-runner][ruby layer]] that suggests a number of packages and
   configurations.
*** enable linum mode for Ruby
    #+begin_src emacs-lisp :tangle yes
      (progn
	(add-hook 'ruby-mode-hook #'linum-mode)
	(add-hook 'enh-ruby-mode-hook #'linum-mode))
    #+end_src
*** bundler
    #+begin_src emacs-lisp :tangle yes
      (use-package bundler
	:ensure t
	:init (dolist (mode '(ruby-mode enh-ruby-mode))))
    #+end_src
*** enh-ruby-mode
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package enh-ruby-mode
	:mode "\\.rb\\'"
	:interpreter "ruby")
    #+END_SRC
*** inf-ruby
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package inf-ruby
       :defer t
       :config
       (progn
	 (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)
	 (add-hook 'enh-ruby-mode-hook 'inf-ruby-minor-mode)))
   #+END_SRC
*** rbenv
    Disabled now, because using asdf instead of rbenv
    #+begin_src emacs-lisp :tangle no
      (use-package rbenv
	:ensure t
	:defer t
	:init (progn
		(add-hook 'ruby-mode-hook #'global-rbenv-mode)
		(add-hook 'enh-ruby-mode-hook #'global-rbenv-mode)
		(add-hook 'ruby-mode-hook #'rbenv-use-global)
		(add-hook 'enh-ruby-mode-hook #'rbenv-use-global)))
    #+end_src
    
*** robe
    #+begin_src emacs-lisp :tangle yes
      (use-package robe
	:ensure t
	:defer t
	:config
	(add-hook 'ruby-mode-hook 'robe-mode)
	(add-hook 'enh-ruby-mode-hook 'robe-mode))
    #+end_src
*** rubocop
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package rubocop
	:ensure t
	:config
	(progn
	  (add-hook 'ruby-mode-hook #'rubocop-mode)
	  (add-hook 'enh-ruby-mode-hook #'rubocop-mode)))
    #+END_SRC
*** RSpec Mode
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package rspec-mode
	:ensure t)
    #+END_SRC
*** ruby-electric
    #+begin_src emacs-lisp :tangle yes
      (use-package ruby-electric
      :ensure t)
    #+end_src
*** seeing-is-believing
    #+begin_src emacs-lisp :tangle yes
      (use-package seeing-is-believing
      :ensure t)
    #+end_src

** Python
*** python-black
    #+begin_src emacs-lisp :tangle yes
      (use-package python-black
	:ensure t
	:after python)
    #+end_src

*** elpy
    These are the [[https://elpy.readthedocs.io/en/latest/introduction.html][author's instructions]] for installation and
    configuration. but they don't seem to work.
    #+begin_src emacs-lisp :tangle no
   (use-package elpy
     :ensure t
     :defer t
     :init
     (advice-add 'python-mode :before 'elpy-enable))
    #+end_src

    #+begin_src emacs-lisp :tangle yes
      (use-package elpy
	:ensure t
	:config
	(elpy-enable)
	(setq elpy-rpc-python-command "python")
	(setq python-shell-interpreter "python")
	(setq elpy-virtual-env-path 'current)
      ;  (setenv "WORKON_HOME" "/Users/cwulfman/.local/share/virtualenvs")
	(setenv "WORKON_HOME" "/Users/cwulfman/.pyenv/versions"))
    #+end_src
*** pyenv-mode
    Helps pyenv work nicely with elpy (see
    https://smythp.com/emacs/python/2016/04/27/pyenv-elpy.html)

    See also http://rakan.me/emacs/python-dev-with-emacs-and-pyenv/
    #+begin_src emacs-lisp :tangle yes
      (use-package pyenv-mode
	:ensure t
	:config
	(add-hook 'python-mode-hook 'pyenv-mode))
    #+end_src
*** virtualenvwrapper
       #+BEGIN_SRC emacs-lisp :tangle no
	 (use-package virtualenvwrapper
	   :ensure t
	   :defer t
	   :init
	   (venv-initialize-interactive-shells)
	   (venv-initialize-eshell))
	#+END_SRC
*** pipenv
   [[https://docs.pipenv.org][Pipenv]] is, apparently, the recommended Python packaging tool
   now. It combines pip and virtualenv. [[https://github.com/pwalsh/pipenv.el][pipenv.el]] is an emacs porcelin
   around pipenv.
   #+begin_src emacs-lisp :tangle no
     (use-package pipenv
       :hook (python-mode . pipenv-mode)
       :init
       (setq
	pipenv-projectile-after-switch-function
	#'pipenv-projectile-after-switch-extended)
       :ensure t)
   #+end_src

**** XQuery
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package xquery-mode
	 :ensure t
	 :mode (("\\.xq[lm]?\\'" . xquery-mode)))
     #+END_SRC

**** Prolog
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package ediprolog
	 :ensure t
	 :mode (("\\.pl\\'" . prolog-mode)))
     #+END_SRC
* Rails support
** projectile-rails
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package projectile-rails
       :ensure t
       :config
       (projectile-rails-global-mode))
   #+END_SRC
* Miscellaneous
** plantuml-mode
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package plantuml-mode
       :ensure t
       :config
       (progn
	 (setq plantuml-jar-path "/usr/local/Cellar/plantuml/1.2020.0/libexec/plantuml.jar")
	 (setq org-plantuml-jar-path plantuml-jar-path))
       )
   #+END_SRC

** CSV
*** csv-mode
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package csv-mode
	:ensure t
	:defer t)
    #+END_SRC
*** csv-nav
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package csv-nav
	:ensure t
	:defer t)
    #+END_SRC
** Semantic Web
*** omn-mode
    for editing files in OWL Manchester notation
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package omn-mode
	:ensure t)
    #+END_SRC
** YAML
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package yaml-mode
       :ensure t
       :mode (("\\.yml\\'" . yaml-mode)))
   #+END_SRC
** JSON
   #+begin_src emacs-lisp :tangle yes
     (use-package json-mode
       :ensure t
       :mode (("\\.json\\'" . json-mode)))
	      
   #+end_src

** Dash
   A prerequisite for dired-hacks
   #+begin_src emacs-lisp :tangle yes
     (use-package dash
       :ensure t)
   #+end_src
* Trial packages
** avy
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package avy
       :ensure t
       :config
       (progn
	 (avy-setup-default)
	 (global-set-key (kbd "C-c C-j") 'avy-resume)
	 (global-set-key (kbd "C-:") 'avy-goto-char)
	 (global-set-key (kbd "C-'") 'avy-goto-char-2)))
   #+END_SRC
** wordnut
   #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package wordnut
	:ensure t)
   #+END_SRC
** webmode
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package web-mode
       :ensure t
       :mode (("\\.erb\\'" . web-mode)
   	   ("\\.jinja2\\'" . web-mode)))
   #+END_SRC
** flycheck
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package flycheck
       :ensure t
       :init (global-flycheck-mode))
   #+END_SRC
** flycheck-plantuml
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package flycheck-plantuml
       :ensure t
       :init (with-eval-after-load 'flycheck
       (require 'flycheck-plantuml)
       (flycheck-plantuml-setup)))
   #+END_SRC
** leuven-theme
   Nice in general, but the headings are notoriously too big and so
   must be adjusted.
   #+begin_src emacs-lisp :tangle no
     (use-package leuven-theme
       :ensure t
       :init
       (progn
	 (setq leuven-scale-outline-headlines nil)
	 (setq leuven-scale-org-agenda-structure nil)))
   #+end_src
** poet-theme
   Has some prereqs.
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package poet-theme
       :ensure t
       :init
       (progn
	 (set-face-attribute 'default nil :family "Fira Code" :height 130)
	 (set-face-attribute 'fixed-pitch nil :family "Fira Code")
	 (set-face-attribute 'variable-pitch nil :family "Georgia")
	 (add-hook 'text-mode-hook
		   (lambda ()
		     (variable-pitch-mode 1)))))
   #+END_SRC
** spelling
   Emacs 26 now supports [[https://abiword.github.io/enchant/][Enchant]], and Hunspell is more modern than aspell.
   Wcheck-mode seems popular.
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package wcheck-mode
       :ensure t
       :init
       (progn
	 (autoload 'wcheck-mode "wcheck-mode"
	   "Toggle wcheck-mode." t)
	 (autoload 'wcheck-change-language "wcheck-mode"
	   "Switch wcheck-mode languages." t)
	 (autoload 'wcheck-actions "wcheck-mode"
	   "Open actions menu." t)
	 (autoload 'wcheck-jump-forward "wcheck-mode"
	   "Move point forward to next marked text area." t)
	 (autoload 'wcheck-jump-backward "wcheck-mode"
	   "Move point backward to previous marked text area." t)))
   #+END_SRC
** ace-window
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package ace-window
       :ensure t
       :config
       (global-set-key (kbd "M-o") 'ace-window))
   #+END_SRC
** deadgrep
   emacs mode for ripgrep
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package deadgrep
       :ensure t
       :config
       (global-set-key (kbd "<f5>") #'deadgrep))
   #+END_SRC
** org-super-agenda
   This package lets you “supercharge” your Org daily/weekly
   agenda. The idea is to group items into sections, rather than
   having them all in one big list.

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package org-super-agenda
       :ensure t
       :config
       (progn (add-to-list 'org-modules 'org-habit)
       (setq org-super-agenda-groups
	     '(;; Each group has an implicit boolean OR operator between its selectors.
	      (:name "Today"  ; Optionally specify section name
		     :time-grid t  ; Items that appear on the time grid
		     :todo "TODAY")  ; Items that have this TODO keyword
	      (:name "Important"
		     ;; Single arguments given alone
		     :tag "bills"
		     :priority "A")
	      ;; Set order of multiple groups at once
	      (:order-multi (2 (:name "Shopping in town"
				      ;; Boolean AND group matches items that match all subgroups
				      :and (:tag "shopping" :tag "@town"))
			       (:name "Food-related"
				      ;; Multiple args given in list with implicit OR
				      :tag ("food" "dinner"))
			       (:name "Personal"
				      :habit t
				      :tag "personal")
			       (:name "Space-related (non-moon-or-planet-related)"
				      ;; Regexps match case-insensitively on the entire entry
				      :and (:regexp ("space" "NASA")
						    ;; Boolean NOT also has implicit OR between selectors
						    :not (:regexp "moon" :tag "planet")))))
	      ;; Groups supply their own section names when none are given
	      (:todo "WAITING" :order 8)  ; Set order of this section
	      (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
		     ;; Show this group at the end of the agenda (since it has the
		     ;; highest number). If you specified this group last, items
		     ;; with these todo keywords that e.g. have priority A would be
		     ;; displayed in that group instead, because items are grouped
		     ;; out in the order the groups are listed.
		     :order 9)
	      (:priority<= "B"
			   ;; Show this section after "Today" and "Important", because
			   ;; their order is unspecified, defaulting to 0. Sections
			   ;; are displayed lowest-number-first.
			   :order 1)
	      ;; After the last group, the agenda will display items that didn't
	      ;; match any of these groups, with the default order position of 99
	      ))))
   #+END_SRC
   
** Doom modeline
   https://github.com/seagle0128/doom-modeline
   #+begin_src emacs-lisp :tangle no
     (use-package doom-modeline
	   :ensure t
	   :hook (after-init . doom-modeline-mode))
   #+end_src
** HTTP twiddle
   Recommended by the Lambda Island guy
   #+begin_src emacs-lisp :tangle yes
     (use-package http-twiddle
       :ensure t)
   #+end_src
** dired-hacks
   Requires dired-hacks-utils first
   #+begin_src emacs-lisp :tangle no
     (use-package dired-hacks-utils
       :ensure t)
   #+end_src
   #+begin_src emacs-lisp :tangle no
     (use-package dired-subtree
       :ensure t
       :config
       (bind-keys :map dired-mode-map
		  ("i" . dired-subtree-insert)
		  (";" . dired-subtree-remove)))
   #+end_src
** ivy-bibtex
   Recommended by 
   https://jonathanabennett.github.io/blog/2019/05/29/writing-academic-papers-with-org-mode/
   See github: https://github.com/tmalsburg/helm-bibtex
   #+begin_src emacs-lisp :tangle no
     (use-package ivy-bibtex
       :ensure t
       :config
       (setq ivy-re-builders-alist
	   '((ivy-bibtex . ivy--regex-ignore-order)
	     (t . ivy--regex-plus)))
       :custom
       (helm-bibtex-bibliography '("~/zotero.bib"))
       ;; is this variable needed?
       (ivy-bibtex-bibliography '("~/zotero.bib"))
       (reftex-default-bibliography '("~/zotero.bib"))
       (bibtex-completion-pdf-field "file")
       :hook (Tex . (lambda () (define-key Tex-mode-map "\C-ch" 'ivy-bibtex))))
   #+end_src

** org-ref
   #+begin_src emacs-lisp :tangle no
     (use-package org-ref
       :ensure t
       :custom
       (org-ref-defaul-bibliography "~/zotero.bib"))
   #+end_src
** neotree
   Right now, I'm preferring treemacs to neotree
   #+begin_src emacs-lisp :tangle no
     (use-package neotree
       :defer t
       :config
       (global-set-key [f8] 'neotree-toggle))
   #+end_src
   
** treemacs
   #+begin_src emacs-lisp :tangle yes
     (use-package treemacs
       :ensure t
       :defer t)

     (use-package treemacs-projectile
       :after tremacs projectile
       :ensure t)

     (use-package treemacs-icons-dired
       :after treemacs dired
       :ensure t
       :config (treemacs-icons-dired-mode))

     (use-package treemacs-magit
       :after treemacs magit
       :ensure t)
   #+end_src
** tox
   For python
   #+begin_src emacs-lisp :tangle yes
     (use-package tox
       :ensure t
       :config (setq tox-runner 'py.test))
   #+end_src
